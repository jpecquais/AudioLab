/*
@name: Filter libraries
@author: Jean-Loup Pecquais
*/

import("stdfaust.lib");

hilbert(sig) = real(sig),imag(sig) with {
    real(x) = x : fi.tf22t(-0.260502,0.02569,1.,0.02569,-0.260502) : fi.tf22t(0.870686,-1.8685,1.,-1.8685,0.870686);
    imag(x) = x : fi.tf22t(0.94657,-1.94632,1.,-1.94632,0.94657) : fi.tf22t(0.06338,-0.83774,1.,-0.83774,0.06338);
};

phase_rotator(phase,sig) = sig : hilbert : +(*(cos(phase):si.smoo),*(sin(phase):si.smoo));

allpass(Q,x) = +(x'-Q*x)~(*(Q));
allpass_delay(max_del,del,gain,x) = +(del_x-gain*x)~(*(gain)) with {
    del_x = de.delay(max_del,del,x);
};

allpass_2nd(fx,B) = fi.tf2(k2, k1*(1+k2), 1, k1*(1+k2), k2) with {
    tanPiBT = tan(ma.PI*B/ma.SR);
    k1 = 0.0 - cos(2.0*ma.PI*fx/ma.SR);
    k2 = (1.0 - tanPiBT)/(1.0 + tanPiBT);
};

/////////////////////////////////////////////
/*
Crossover filter
*/
crossover1(fc,sig) = low_band, high_band with {
    low_band = sig :fi.lowpass(1,fc);
    high_band = sig : fi.highpass(1,fc);
};

crossover2(fc,sig) = low_band, high_band with {
    low_band = sig : fi.lowpass(1,fc) : fi.lowpass(1,fc);
    high_band = sig : fi.highpass(1,fc) : fi.highpass(1,fc) : *(-1);
};