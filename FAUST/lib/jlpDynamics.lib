ma = library("maths.lib");
ba = library("basics.lib");
ro = library("routes.lib");
de = library("delays.lib");
an = library("analyzers.lib");
ef = library("misceffects.lib");
si = library("signals.lib");
it = library("interpolators.lib");
fi = library("filters.lib"); // for compatible copy/paste out of this file

// Custom Lib
jlpEnv = library("jlpEnvelop.lib");

declare name "JLP Envelop Library";
declare author "Jean-Loup Pecquais";
declare license "GPL3"; 


/*

Compressor : Generic Gain Computer

Compute a gain attenuation for compression purpose.
It includes an RMS smoothing enveloppe and an Attack Hold Release envelop.

The RMS smoothing can change the "reactivity" of the compressor. The small it is, the snappier it gets. The bigger it it, the smoother get.

Attack determines the time to reach the max ratio (strenght) once the threshold is exceeded.
Release determines the time to reach no ratio (strenght) once the signal is below the threshold.

A knee is also configurable. It make the ratio (strenght) dependent on the input signal

*/

RMS(time) = ba.slidingRMS(s) with { s = ba.sec2samp(time):int:max(1); };

crestFactorComputer(rms,x) = x <: (abs, RMS(rms)) : - ;

crestFactorComputer_nCh(rms,link,1,x) =
  crestFactorComputer(rms,x);

crestFactorComputer_nCh(rms,link,N,x) =
  par(i, N, crestFactorComputer(rms,x))
  <:(si.bus(N),(ba.parallelMin(N)<:si.bus(N))):ro.interleave(N,2):par(i,N,(it.interpolate_linear(link)));



comp_genericGainComputer(strength,thresh,att,hld,rel,rms,knee) =
  fi.highpass(4,10) : fi.itu_r_bs_1770_4_kfilter : RMS(rms) : ba.linear2db <: ( gain_computer(strength,thresh,knee) : ba.db2linear), jlpEnv.ahr(att,hld,rel,loThresh) : * 
with {
    gate = 1;
    loThresh = thresh-(knee/2);
    gain_computer(strength,thresh,knee,level) =
        select3((level>loThresh)+(level>(thresh+(knee/2))),
                0,
                ((level-thresh+(knee/2)):pow(2)/(2*knee)),
                (level-thresh)
                ) : max(0)*-strength;
  	//RMS(time) = ba.slidingRMS(s) with { s = ba.sec2samp(time):int:max(1); };
};

comp_genericGainComputer_nCh(strength,thresh,att,hld,rel,rms,knee,link,1) =
  comp_genericGainComputer(strength,thresh,att,rel,hld,rms,knee);

comp_genericGainComputer_nCh(strength,thresh,att,hld,rel,rms,knee,link,N) =
  par(i, N, comp_genericGainComputer(strength,thresh,att,rel,hld,rms,knee))
  <:(si.bus(N),(ba.parallelMin(N)<:si.bus(N))):ro.interleave(N,2):par(i,N,(it.interpolate_linear(link)));
